{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs56 \cf0                        ASSIGNMENT-4
\f1\b0\fs26 \
\
1. In Java, an exception is an event or condition that occurs during the execution of a program, which disrupts the normal flow of the program. When an exceptional condition arises, an object representing the exception is created, and the program can choose to handle or propagate the exception.\
\
2. There are two main types of exceptions in Java:\
   a. Checked Exceptions: These are exceptions that must be explicitly declared in a method's signature using the "throws" keyword, and they are checked by the compiler at compile-time. Examples include IOException and SQLException.\
\
   b. Unchecked Exceptions (Runtime Exceptions): These are exceptions that can be unchecked and are not required to be declared explicitly. They usually indicate programming errors or issues that are beyond the control of the programmer. Examples include NullPointerException and ArrayIndexOutOfBoundsException.\
\
3. Exceptions are handled in Java using try-catch blocks. The code that may throw an exception is placed inside a "try" block, and one or more "catch" blocks follow to handle specific exception types. Additionally, there is an optional "finally" block that can be used to execute code that should run regardless of whether an exception occurred or not.\
\
4. Java's Exception class provides several important methods for working with exceptions. Some of the key methods include:\
\
   - `getMessage()`: Returns a description of the exception.\
   - `toString()`: Returns a string representation of the exception.\
   - `printStackTrace()`: Prints the exception's stack trace to the standard error stream.\
   - `getCause()`: Returns the cause of the exception.\
\
5. Runtime exceptions in Java are a type of unchecked exception that occurs at runtime and often result from programming errors or incorrect usage of libraries or APIs. They do not need to be explicitly caught or declared, making them easier to overlook during development.\
\
6. "throw" is a keyword in Java used to explicitly throw an exception in your code. You can throw either a pre-defined exception or create your custom exception and throw it.\
\
   "throws" is used in method declarations to specify that a method may throw exceptions of a particular type. It does not actually throw the exception but indicates that the method could potentially throw exceptions of the declared types. This is important for the callers of the method to be aware of the exceptions they need to handle or propagate.\
\
7. In Java, errors and exceptions are both subtypes of the Throwable class, but they serve different purposes:\
\
   - Exceptions: These are problems that can be reasonably anticipated and handled by the programmer. They are typically caused by faulty code or external factors and should be caught and handled in the program.\
\
   - Errors: These are typically unrecoverable problems that occur at a system level, such as running out of memory or encountering a system crash. Errors are not meant to be caught or handled by the program and often indicate serious issues.\
\
8. The hierarchy of exceptions in Java is based on the class hierarchy of the `java.lang.Throwable` class. It is divided into two main branches:\
\
   - Checked Exceptions: These extend the `Exception` class.\
   - Unchecked Exceptions (Runtime Exceptions): These extend the `RuntimeException` class.\
   - Errors: These extend the `Error` class.\
\
9. In Java, a package is a way to organise classes and interfaces into a namespace to avoid naming conflicts and to create a modular and structured codebase. Packages provide a means of grouping related classes and making them more manageable. Packages can be created and organised using the "package" keyword at the beginning of Java source files.\
\
10. Access modifiers in Java control the visibility and accessibility of classes, methods, and fields. There are four main access modifiers in Java:\
\
   - public: The member is accessible from any other class.\
   - private: The member is accessible only within the same class.\
   - protected: The member is accessible within the same class, subclasses, and classes in the same package.\
   - default: (no modifier): The member is accessible within the same package.\
\
11. Non-access modifiers in Java are used to specify additional characteristics or behaviour of classes, methods, and fields. Some common non-access modifiers include:\
\
   -  static: Used to define a class-level member, not tied to a specific instance.\
   -  final: Indicates that a member cannot be overridden or that a class cannot be extended.\
   -  abstract: Specifies that a class or method is incomplete and must be implemented by subclasses.\
   -  synchronised: Ensures that only one thread can access a synchronised method or block at a time.\
   -  volatile: Indicates that a variable can be modified by multiple threads.\
   -  transient: Informs the JVM to exclude a field from serialisation.}